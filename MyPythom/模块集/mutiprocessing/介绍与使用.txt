Process类的介绍与使用
通过创建一个 Process 对象然后调用它的 start() 方法来生成进程。 Process 和 threading.Thread API 相同。
1.Process([group[, target[, name[, args[, kwargs]]]]]),由该实例化得到的对象，表示一个子进程中的任务(尚未启动）
2.#参数说明
3.一.group参数未使用，值始终为None
4.二.target表示调用对象，即子进程要执行的任务
5.三.args表示调用对象的位置参数元组，args=（1，2，'anne',)是一个元组形式，x结尾必须有逗号
6.四.kwargs表示调用对象的字典，kwargs={'name':'anne','age':18}
7.五.name为子进程的名称


三Process类的方法
run()
表示进程活动的方法。

你可以在子类中重载此方法。标准 run() 方法调用传递给对象构造函数的可调用对象作为目标参数（如果有），
分别从 args 和 kwargs 参数中获取顺序和关键字参数。

start()
启动进程活动。

这个方法每个进程对象最多只能调用一次。它会将对象的 run() 方法安排在一个单独的进程中调用。

join([timeout])
如果可选参数 timeout 是 None （默认值），则该方法将阻塞，直到调用 join() 方法的进程终止。
如果 timeout 是一个正数，它最多会阻塞 timeout 秒。请注意，如果进程终止或方法超时，则该方法返回 None 。
检查进程的 exitcode 以确定它是否终止。
1.p1.join()#表示执行完进程p1再执行主进程
主进程等待子进程，等待的是主进程，所以等待的总时间是子进程中耗费时间最长的那个进程运行的时间

一个进程可以被 join 多次。

进程无法join自身，因为这会导致死锁。尝试在启动进程之前join进程是错误的。
daemon()方法：守护进和，
1.p2.daemon=True #守护进程，表示主进程结束p2就结束

